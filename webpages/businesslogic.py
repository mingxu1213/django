import os
import json
from .algorithm import validate_plan


def optimal_plan_params(inventory_list):
	'''
	optimal_plan_params function take the json format inventory_list as an input.
	The order sequence, the total inventory weight and total inventory volume are calculated.
	'''
	loading_order = []
	total_weight = 0
	total_volume = 0
	for idx, plan in enumerate(inventory_list, start=1):
		loading_order.append(plan.get("id"))
		total_weight += float(plan.get("weight").replace("kg", ""))
		length_width_height = plan.get("dimensions").replace("m", "").split("x")
		total_volume += float(length_width_height[0])*float(length_width_height[1])*float(length_width_height[2])
	return loading_order, round(total_weight,2), round(total_volume,2)


def optimal_plan(optimal_plan_utilisation, plans):
	'''
	optimal_plan function take the optiaml utilisation and valid plan list as params.
	In this function the parameters of optimal plan(s) are generated.
	The output list includes: the order sequence, the total inventory weight and total inventory volume.
	'''
	plans_output = []
	optimal_plans = [plan_id for plan_id, value in plans.items() if value == optimal_plan_utilisation]
	plan_folder = './plans'

	for plan in optimal_plans:
		plan_path = os.path.join(plan_folder, plan)
		with open(plan_path) as inventory_file:
			inventory_list = json.load(inventory_file)
			#The order sequence, the total inventory weight and total inventory volume are calculated.
			plans_output.append(optimal_plan_params(inventory_list))
	return plans_output		


def calculate_utilisation(output_path):
	'''
	calculate_utilisation function take the path as paramter which generated by black box function.
	Every plan in the directory will be checked. 
	After running the function, optimal plan utilisation and valid loading plan list are returned.
	'''
	plan_list = os.listdir(output_path)
	plan_nums = len(plan_list)
	optimal_plan_utilisation = 0 
	plan_utilisation = dict()

	for i in range(0, plan_nums):

		plan_path = os.path.join(output_path, plan_list[i])
		with open(plan_path) as plan_file:
			plan = json.load(plan_file)
		#The black box function is called, no changes made to the black box function.	
		utilisation = validate_plan(plan)

		if utilisation != None:
			plan_utilisation[plan_list[i]] = utilisation

			if utilisation > optimal_plan_utilisation:
				optimal_plan_utilisation = utilisation

	return optimal_plan_utilisation, plan_utilisation
